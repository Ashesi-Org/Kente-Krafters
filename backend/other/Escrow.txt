<?php
session_start();
require_once('db_connection.php');

// Assuming you have a table named 'orders' in your database to store order details
// Columns might include order_id, buyer_id, seller_id, product_id, quantity, total_amount, status, escrow_status, etc.

// Check if the form is submitted for completing the order
if ($_SERVER['REQUEST_METHOD'] == 'POST' && isset($_POST['action']) && $_POST['action'] == 'complete_order') {
    // Implement logic to update order status and initiate escrow
    $order_id = $_POST['order_id'];
    completeOrder($order_id);
}

// Function to complete the order and initiate escrow
function completeOrder($order_id) {
    global $conn;

    try {
        // Start a transaction to ensure atomicity
        $conn->beginTransaction();

        // Fetch order details from the database
        $stmt = $conn->prepare("SELECT * FROM orders WHERE order_id = :order_id");
        $stmt->bindParam(':order_id', $order_id, PDO::PARAM_INT);
        $stmt->execute();
        $order = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($order) {
            // Check if the order is not already completed
            if ($order['status'] == 'pending' && $order['escrow_status'] == 'pending') {
                // Update order status to 'shipped' and escrow status to 'released'
                $stmt = $conn->prepare("UPDATE orders SET status = 'shipped', escrow_status = 'released' WHERE order_id = :order_id");
                $stmt->bindParam(':order_id', $order_id, PDO::PARAM_INT);
                $stmt->execute();

                // Commit the transaction
                $conn->commit();

                // Notify the buyer and seller about the completion of the order
                // ...

                echo 'Order completed successfully. Payment is now released to the seller.';
            } else {
                // Order is already completed or escrow is already released
                echo 'Order has already been completed or escrow has already been released.';
            }
        } else {
            echo 'Invalid order ID.';
        }
    } catch (Exception $e) {
        // An error occurred, rollback the transaction
        $conn->rollback();
        echo 'Error completing the order: ' . $e->getMessage();
    }
}
?>
