DROP DATABASE IF EXISTS kente_commerce;
CREATE DATABASE kente_commerce;
USE kente_commerce;

-- Users
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    address VARCHAR(255),
    phone_number VARCHAR(20)
);

-- Products
-- Common attributes for both types of products
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    product_description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category_id INT,
    CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(category_id)
);

-- Specific attributes for "stole" products
CREATE TABLE stole_products (
    product_id SERIAL PRIMARY KEY,
    product_id_common INT UNIQUE,
    CONSTRAINT fk_stole_common FOREIGN KEY (product_id_common) REFERENCES products(product_id)
);

-- Specific attributes for "fabric_products" products
CREATE TABLE fabric_products (
    product_id SERIAL PRIMARY KEY,
    product_id_common INT UNIQUE,
    template TEXT,
    CONSTRAINT fk_fabric_common FOREIGN KEY (product_id_common) REFERENCES products(product_id)
);


-- Categories
CREATE TABLE categories (
    category_id SERIAL PRIMARY KEY,
    category_name VARCHAR(50) NOT NULL
);

-- Orders
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    user_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    order_status VARCHAR(50) DEFAULT 'pending',
    total_price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- Order Items (Common Attributes)
CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Stole Orders
CREATE TABLE stole_orders (
    order_item_id SERIAL PRIMARY KEY,
    texture VARCHAR(100) NOT NULL,
    color VARCHAR(50),
    width DECIMAL(10, 2),
    height DECIMAL(10, 2),
    logo VARCHAR(255),
    final_design_link VARCHAR(255),
    FOREIGN KEY (order_item_id) REFERENCES order_items(order_item_id) ON DELETE CASCADE
);

-- Fabric Orders
CREATE TABLE fabric_orders (
    order_item_id SERIAL PRIMARY KEY,
    texture VARCHAR(100) NOT NULL,
    final_design_template VARCHAR(255),
    width DECIMAL(10, 2),
    height DECIMAL(10, 2),
    FOREIGN KEY (order_item_id) REFERENCES order_items(order_item_id) ON DELETE CASCADE
);

-- Payments
CREATE TABLE payments (
    payment_id SERIAL PRIMARY KEY,
    order_id INT,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50),
    amount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Shipping
CREATE TABLE shipping (
    shipping_id SERIAL PRIMARY KEY,
    order_id INT,
    shipping_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tracking_number VARCHAR(50),
    address VARCHAR(255),
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Reviews
CREATE TABLE reviews (
    review_id SERIAL PRIMARY KEY,
    user_id INT,
    product_id INT,
    rating INT NOT NULL,
    comments TEXT,
    review_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Shopping Cart
CREATE TABLE shopping_cart (
    cart_id SERIAL PRIMARY KEY,
    user_id INT,
    product_id INT,
    quantity INT NOT NULL,
    PRIMARY KEY (user_id, product_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Promotions
CREATE TABLE promotions (
    promo_id SERIAL PRIMARY KEY,
    promo_code VARCHAR(20) UNIQUE,
    discount_percent DECIMAL(5, 2) NOT NULL,
    start_date TIMESTAMP,
    end_date TIMESTAMP
);

-- Apply promotions to orders (many-to-many relationship)
CREATE TABLE order_promotions (
    order_id INT,
    promo_id INT,
    PRIMARY KEY (order_id, promo_id),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (promo_id) REFERENCES promotions(promo_id)
);

-- Logs
CREATE TABLE logs (
    log_id SERIAL PRIMARY KEY,
    event_type VARCHAR(50) NOT NULL,
    event_description TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Audit
CREATE TABLE audit (
    audit_id SERIAL PRIMARY KEY,
    user_id INT,
    audit_table_name VARCHAR(50) NOT NULL,
    field_name VARCHAR(50) NOT NULL,
    old_value TEXT,
    new_value TEXT,
    audit_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);


CREATE TABLE localization (
    localization_id SERIAL PRIMARY KEY,
    message_key VARCHAR(50) NOT NULL,
    language_code VARCHAR(10) NOT NULL,
    text_value TEXT,
    UNIQUE (message_key, language_code)
);

