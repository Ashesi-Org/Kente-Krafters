<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fabric Customizer</title>
  
  <style>
    #addToCartButton {
      width: 10em;
      height: 4em;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    html{
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      overflow-x: hidden;
    }

    body{
      display: flex;
      flex-direction: column;
      width: 90%;
      height: 100%;
      padding: 1em;
      gap: 1em;
    }

    .color-circle {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
      cursor: pointer;
    }
    .wrapper{
      display: flex;
      flex-direction: row;
    }
  </style>

</head>
<body>
<div><canvas id="myCanvas" width="500" height="500"></canvas></div>
<div class="wrapper">
    <div class="color-circle" style="background-color: red;" onclick="setChosenColor('#FF0000')"></div>
    <div class="color-circle" style="background-color: orange;" onclick="setChosenColor('#FFA500')"></div>
    <div class="color-circle" style="background-color: yellow;" onclick="setChosenColor('#FFFF00')"></div>
    <div class="color-circle" style="background-color: indigo;" onclick="setChosenColor('#4B0082')"></div>
    <div class="color-circle" style="background-color: blue;" onclick="setChosenColor('#0000FF')"></div>
    <div class="color-circle" style="background-color: violet;" onclick="setChosenColor('#EE82EE')"></div>
</div>
    <!-- Add more color circles as needed -->
  </div>
  <button id="addToCartButton">Add to Cart</button>
  
  <script>
    let selected_pixel = '';
    let chosen_color = '';
    let finalDataDict = {};
    
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');

    canvas.addEventListener('click', function (event) {
      const x = Math.round(event.clientX - canvas.getBoundingClientRect().left);
      const y = Math.round(event.clientY - canvas.getBoundingClientRect().top);
      // const x = event.clientX - canvas.getBoundingClientRect().left;
      // const y = event.clientY - canvas.getBoundingClientRect().top;
      const clickedCoordinates = [y, x];
      selected_pixel = clickedCoordinates;
    });

    const addToCartButton = document.getElementById('addToCartButton');
    addToCartButton.addEventListener('click', addToCart);

    function setChosenColor(color) {
        selected_color = color
        recolorAll(selected_pixel, chosen_color);
    }

    //A function to draw a textile
    function drawTextile(colordict){
      const squareSize = 1; 
      for (const coord in colordict) {
          if (colordict.hasOwnProperty(coord)) {
              const color = colordict[coord];
              const [x, y] = coord.split(',').map(Number);
              ctx.fillStyle = color;
              ctx.fillRect(x * squareSize, y * squareSize, squareSize, squareSize);
              ctx.save();
            }
        }
    }
    
    //Function to convert rgb color to hex value
    function rgbToHex(r, g, b) {
        const toHex = (value) => {
            const hex = value.toString(16);
            return hex.length === 1 ? "0" + hex : hex;
        };
        const redHex = toHex(r);
        const greenHex = toHex(g);
        const blueHex = toHex(b);
        return "#" + redHex + greenHex + blueHex;
    }

    
    // A function to recolor the textile
    function recolorAll(coordinate, selectedColor){
        oldColor = finalDataDict[coordinate];
        console.log("This is old color" + oldColor);
        for (const key in finalDataDict) {
            if (finalDataDict.hasOwnProperty(key)) {
                if (finalDataDict[key] === oldColor) {
                    finalDataDict[key] = selectedColor;
                }
            }
        }
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawTextile(finalDataDict);
    }

    //Function to save customization as image and store 
    function addToCart() {
      const imageDataURL = canvas.toDataURL('image/png');
      const downloadLink = document.createElement('a');
      downloadLink.href = imageDataURL;
      downloadLink.download = 'canvas_image.png';
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }

    //Fetching and decoding the textile template
    fetch('/getTextileTemplate')
    .then(response => response.json())
    .then(newDataDictionary => {
      // Assessing the textile data
      Object.keys(newDataDictionary).forEach(rgb => {
        const color = rgb.split(',').map(Number);
        const points = newDataDictionary[rgb];
        points.forEach(point => {
          const [x, y] = point;
          const hexCode = rgbToHex(color[0], color[1], color[2]);
          const coordinatesString = `${y},${x}`;
          finalDataDict[coordinatesString] = hexCode;
        });
      });
      drawTextile(finalDataDict);
    })
    .catch(error => console.error('Error fetching data:', error));

    
  </script>
</body>
</html>
