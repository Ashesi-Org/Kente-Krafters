<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Color Replacement</title>

  <style>
    html {
      width: 100%;
      height: 100%;
      overflow-x: hidden;
    }

    body {
      padding: 1em;
    }

    #addToCartButton {
      width: 10em;
      height: 4em;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    }

    .color-circle {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      margin-right: 10px;
      cursor: pointer;
    }

    .pallete {
      display: flex;
      flex-direction: row;
      padding-top: 1em;
      padding-bottom: 1em;
    }
  </style>
</head>

<body>
  <canvas id="imageCanvas" width="500" height="500" style="border:1px solid #000;"></canvas>
  <div class="pallete">
    <div class="color-circle" style="background-color: red;" onclick="setChosenColor('#FF0000')"></div>
    <div class="color-circle" style="background-color: orange;" onclick="setChosenColor('#FFA500')"></div>
    <div class="color-circle" style="background-color: yellow;" onclick="setChosenColor('#FFFF00')"></div>
    <div class="color-circle" style="background-color: indigo;" onclick="setChosenColor('#4B0082')"></div>
    <div class="color-circle" style="background-color: blue;" onclick="setChosenColor('#0000FF')"></div>
    <div class="color-circle" style="background-color: violet;" onclick="setChosenColor('#EE82EE')"></div>
  </div>
  <button id="addToCartButton">Add to Cart</button>

  <script>
    //Declaring the canvas ready
    const canvas = document.getElementById('imageCanvas');
    const addToCartButton = document.getElementById('addToCartButton');
    addToCartButton.addEventListener('click', addToCart);
    const ctx = canvas.getContext('2d');
    //Future Image Data Storage
    let imageData;
    // Load the image
    const imageUrl = 'readymade2_quantized.png';
    const image = new Image();

    //Ensuring CORS is enabled
    image.crossOrigin = 'Anonymous'; // Enable cross-origin image access
    image.src = "<%= imageUrl %>";

    image.onload = function () {
      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
      imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
    };

    let replacementColor = '';
    let selectedPixels = [];

    canvas.addEventListener('click', function (event) {
      const x = event.offsetX;
      const y = event.offsetY;
      const clickedColor = getColorAtPixel(x, y);
      const targetColor = [clickedColor[0], clickedColor[1], clickedColor[2]];
      selectedPixels = findPixelsWithColor(targetColor);
    });

    function setChosenColor(color) {
      replacementColor = hexToRgb(color);
      replaceColor(selectedPixels, replacementColor);
      // Redraw the canvas with the modified image data
      ctx.putImageData(imageData, 0, 0);
    }

    function getColorAtPixel(x, y) {
      const index = (y * canvas.width + x) * 4;
      return [
        imageData.data[index],
        imageData.data[index + 1],
        imageData.data[index + 2]
      ];
    }

    function findPixelsWithColor(targetColor) {
      const selected = [];
      for (let i = 0; i < imageData.data.length; i += 4) {
        const r = imageData.data[i];
        const g = imageData.data[i + 1];
        const b = imageData.data[i + 2];

        if (r === targetColor[0] && g === targetColor[1] && b === targetColor[2]) {
          // Record the coordinates and color of the selected pixel
          const x = (i / 4) % canvas.width;
          const y = Math.floor((i / 4) / canvas.width);
          selected.push({x, y, color: [r, g, b]});
        }
      }
      return selected;
    }

    function replaceColor(selectedPixels, replacementColor) {
      for (const pixel of selectedPixels) {
        const index = (pixel.y * canvas.width + pixel.x) * 4;
        imageData.data[index] = replacementColor[0];
        imageData.data[index + 1] = replacementColor[1];
        imageData.data[index + 2] = replacementColor[2];
      }
    }

    function hexToRgb(hex) {
      // Convert a hex color code to an RGB array
      const bigint = parseInt(hex.slice(1), 16);
      const r = (bigint >> 16) & 255;
      const g = (bigint >> 8) & 255;
      const b = bigint & 255;
      return [r, g, b];
    }

    function addToCart() {
      const imageDataURL = canvas.toDataURL('image/png');
      const downloadLink = document.createElement('a');
      downloadLink.href = imageDataURL;
      downloadLink.download = 'canvas_image.png';
      document.body.appendChild(downloadLink);
      downloadLink.click();
      document.body.removeChild(downloadLink);
    }
  </script>
</body>

</html>
